#!/usr/bin/env python
# Usage: gff3-to-tbl project.gff >project.tbl
# Written by Shaun Jackman <sjackman@gmail.com>.

from BCBio import GFF
import sys

def print_coord(f):
    """ Print the coordinates of this feature.
    """
    if f.strand == 1:
        print "%d\t%d" % (f.location.nofuzzy_start + 1, f.location.nofuzzy_end)
    else:
        print "%d\t%d" % (f.location.nofuzzy_end, f.location.nofuzzy_start + 1)

def print_coord_override_type(f, type):
    """ Print the coordinates of this feature and a type.
    """
    if f.strand == 1:
        print "%d\t%d\t%s" % (f.location.nofuzzy_start + 1, f.location.nofuzzy_end, type)
    else:
        print "%d\t%d\t%s" % (f.location.nofuzzy_end, f.location.nofuzzy_start + 1, type)

def print_coord_type(f):
    """ Print the coordinates and type of this feature.
    """
    print_coord_override_type(f, f.type)

def subfeatures(f):
    """ Iterate over the subfeatures of this feature.
    """
    if f.strand == 1:
        return f.sub_features
    else:
        return reversed(f.sub_features)

def print_mrna(f):
    """ Print a mRNA feature.
    """
    if len(f.sub_features) == 0:
        return
    count = 0
    for sf in subfeatures(f):
        if sf.type != 'CDS':
            continue
        count += 1
        if count == 1:
            print_coord_type(sf)
        else:
            print_coord(sf)
    #xxx print "\t\t\tproduct\t%s" % 'hypothetical protein'
    print "\t\t\tproduct\t%s" % f.qualifiers['Name'][0]
    print "\t\t\tprotein_id\t%s" % f.qualifiers['Name'][0]
    if 'exception' in f.qualifiers:
        print "\t\t\texception\t%s" % f.qualifiers['exception'][0]

def trans_spliced(f):
    """ Return whether this feature is trans-spliced.
    """
    return ('exception' in f.qualifiers
        and f.qualifiers['exception'][0] == 'trans-splicing')

def print_gene(f):
    """ Print a gene feature.
    """
    if trans_spliced(f):
        # Print the coordinates of the trans-spliced mRNA.
        count = 0
        for sf in subfeatures(f):
            count += 1
            if count == 1:
                print_coord_override_type(sf, 'gene')
            else:
                print_coord(sf)
    else:
        print_coord_type(f)

    name = f.qualifiers['Name'][0].rpartition('-gene')[0]
    gene = name.partition('|')[0]
    print "\t\t\tgene\t%s" % gene
    print "\t\t\tlocus_tag\t%s" % f.qualifiers['ID'][0]
    if 'exception' in f.qualifiers:
        print "\t\t\texception\t%s" % f.qualifiers['exception'][0]

    for sf in subfeatures(f):
        if sf.type == 'mRNA':
            print_mrna(sf)
        elif sf.type == 'rRNA':
            print_coord_type(sf)
            size = name.partition('rrn')[2]
            print "\t\t\tproduct\t%sS ribosomal RNA" % size
        elif sf.type == 'tRNA':
            print_coord_type(sf)
            aa = name[3]
            anticodon = name.partition('-')[2]
            print "\t\t\tproduct\ttRNA-%s" % aa
            print "\t\t\tnote\tanticodon:%s" % anticodon

def main(gff_file):
    for rec in GFF.parse(gff_file):
        print ">Feature %s" % rec.id
        seen = {}
        for f in rec.features:
            if f.type != 'gene':
                continue
            if trans_spliced(f):
                # Skip the second copy of the trans-spliced gene.
                child = f.sub_features[0].qualifiers['ID'][0]
                if child in seen:
                    continue
                seen[child] = True
            print_gene(f)

if __name__ == "__main__":
    main(*sys.argv[1:])
